-- –õ–∏–¥–µ—Ä-–∫–ª–∞–≤–∏—à–∞ (–ø—Ä–æ–±–µ–ª)
vim.g.mapleader = " "
_G.vim = vim

-- –ü–æ–¥–∫–ª—é—á–∞–µ–º Lazy.nvim (–º–µ–Ω–µ–¥–∂–µ—Ä –ø–ª–∞–≥–∏–Ω–æ–≤)
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
	vim.fn.system({
		"git",
		"clone",
		"--filter=blob:none",
		"https://github.com/folke/lazy.nvim.git",
		"--branch=stable",
		lazypath,
	})
end
vim.opt.rtp:prepend(lazypath)

-- –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–≥–∏–Ω—ã
require("lazy").setup("plugins")

-- –ê–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
vim.api.nvim_create_autocmd("BufWritePre", {
	pattern = "*",
	callback = function()
		vim.lsp.buf.format({ timeout_ms = 2000 })
	end,
})

-- –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
vim.opt.number = true
vim.opt.relativenumber = true
vim.opt.clipboard = "unnamedplus"
vim.opt.termguicolors = true
vim.opt.mouse = "a"
vim.opt.scrolloff = 8
vim.opt.signcolumn = "yes"
vim.api.nvim_set_option("pumblend", 15) -- –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –º–µ–Ω—é –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
vim.api.nvim_set_option("winblend", 15) -- –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω
vim.o.hlsearch = true
vim.cmd("highlight Search guifg=#ffffff guibg=#ff007c gui=bold")
vim.cmd("highlight IncSearch guifg=#ffffff guibg=#ff007c gui=bold")
vim.o.number = true -- –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫
vim.o.relativenumber = false -- ‚ùå –û—Ç–∫–ª—é—á–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é –Ω—É–º–µ—Ä–∞—Ü–∏—é
-- GitLab CI
vim.api.nvim_create_autocmd("BufRead", {
	pattern = ".gitlab-ci.yml",
	command = "set filetype=yaml.gitlab",
})

-- Ansible (–≤—Å–µ —Ñ–∞–π–ª—ã playbook-*)
vim.api.nvim_create_autocmd("BufRead", {
	pattern = "playbook*.yml",
	command = "set filetype=yaml.ansible",
})

-- Kubernetes (–µ—Å–ª–∏ —Ñ–∞–π–ª –≤–Ω—É—Ç—Ä–∏ `k8s/`)
vim.api.nvim_create_autocmd("BufRead", {
	pattern = "k8s/*.yml",
	command = "set filetype=yaml.kubernetes",
})

-- Docker Compose (–µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è `docker-compose.yml`)
vim.api.nvim_create_autocmd("BufRead", {
	pattern = "docker-compose.yml",
	command = "set filetype=yaml.docker-compose",
})

vim.cmd([[
  augroup CursorLine
    autocmd!
    autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    autocmd InsertEnter * highlight CursorLine guibg=#313244
    autocmd InsertLeave * highlight CursorLine guibg=#1e1e2e
  augroup END
]])

vim.opt.guicursor = "n-v-c:block,i-ci:ver25,r-cr:hor20,o:hor50"

vim.cmd("highlight WinSeparator guifg=#ff007c gui=bold")
vim.o.fillchars = "vert:‚îÉ"
local border = "rounded"
vim.lsp.handlers["textDocument/hover"] = vim.lsp.with(vim.lsp.handlers.hover, { border = border })
vim.lsp.handlers["textDocument/signatureHelp"] = vim.lsp.with(vim.lsp.handlers.signature_help, { border = border })

vim.api.nvim_create_autocmd("BufEnter", {
	pattern = "*",
	command = "if winnr('$') == 1 && bufname() == 'NvimTree_' . tabpagenr() | quit | endif",
})

-- –£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
vim.keymap.set("n", "<leader>e", "<cmd>NvimTreeToggle<CR>", { desc = "–§–∞–π–ª–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä" })
vim.keymap.set("n", "<leader>r", "<cmd>NvimTreeRefresh<CR>", { desc = "–û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ" })
vim.keymap.set("n", "<leader>n", "<cmd>NvimTreeFindFile<CR>", { desc = "–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª" })

-- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
vim.keymap.set({ "n", "i", "v" }, "<C-s>", "<cmd>w<CR>", { desc = "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª" })

-- –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ (Telescope)
vim.keymap.set("n", "<leader>ff", "<cmd>Telescope find_files<cr>", { desc = "–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤" })
vim.keymap.set("n", "<leader>fg", "<cmd>Telescope live_grep<cr>", { desc = "–ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫" })
vim.keymap.set("n", "<leader>fb", "<cmd>Telescope buffers<cr>", { desc = "–ë—É—Ñ–µ—Ä—ã" })
vim.keymap.set("n", "<leader>fh", "<cmd>Telescope help_tags<cr>", { desc = "–ü–æ–º–æ—â—å" })

-- Git –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
vim.keymap.set("n", "<leader>gc", "<cmd>Telescope git_commits<cr>", { desc = "Git commits" })
vim.keymap.set("n", "<leader>gb", "<cmd>Telescope git_branches<cr>", { desc = "Git branches" })

-- Markdown Preview
vim.keymap.set("n", "<leader>mp", "<cmd>MarkdownPreview<CR>", { desc = "üìú Markdown Preview" })

-- –¢–µ—Ä–º–∏–Ω–∞–ª (ToggleTerm)
vim.keymap.set("n", "<leader>t", "<cmd>ToggleTerm<CR>", { desc = "üìå –û—Ç–∫—Ä—ã—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª" })

-- –û—à–∏–±–∫–∏ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ (Trouble)
vim.keymap.set("n", "<leader>xx", "<cmd>TroubleToggle<CR>", { desc = "üö® –û—Ç–∫—Ä—ã—Ç—å Trouble" })

-- –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ Neovim
vim.keymap.set("n", "<leader>rr", "<cmd>source $MYVIMRC<CR>", { desc = "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥" })
local map = vim.keymap.set

-- üìÇ –†–∞–±–æ—Ç–∞ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
map("n", "<leader>pp", "<cmd>Telescope project<CR>", { desc = "üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç—ã" })

-- üîç GIT
map("n", "<leader>gd", "<cmd>DiffviewOpen<CR>", { desc = "üîç –û—Ç–∫—Ä—ã—Ç—å DiffView" })
-- üìå –¢–µ—Ä–º–∏–Ω–∞–ª
map("n", "<leader>tt", "<cmd>ToggleTerm<CR>", { desc = "üìå –û—Ç–∫—Ä—ã—Ç—å —Ç–µ—Ä–º–∏–Ω–∞–ª" })
map("t", "<Esc>", "<C-\\><C-n>", { desc = "üö™ –í—ã–π—Ç–∏ –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞" })

-- üöÄ –ü–æ–∏—Å–∫
map("n", "<leader>sp", "<cmd>Telescope live_grep<CR>", { desc = "üîç –ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ –≤ –ø—Ä–æ–µ–∫—Ç–µ" })
map("n", "<leader>sf", "<cmd>Telescope find_files<CR>", { desc = "üìÇ –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤" })

-- üö® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
map("n", "<leader>un", "<cmd>Noice history<CR>", { desc = "üìú –ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π" })
vim.keymap.set(
	"v",
	"<leader>re",
	":Refactor extract<CR>",
	{ desc = "üõ† –í—ã–Ω–µ—Å—Ç–∏ –≤ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é" }
)
vim.keymap.set("v", "<leader>rv", ":Refactor extract_var<CR>", { desc = "üìå –í—ã–Ω–µ—Å—Ç–∏ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é" })
vim.keymap.set("n", "<leader>o", "<cmd>SymbolsOutline<CR>", { desc = "üìë –û—Ç–∫—Ä—ã—Ç—å Symbols Outline" })
vim.keymap.set("n", "<leader>ca", "<cmd>Lspsaga code_action<CR>", { desc = "‚ö° Code Action" })
vim.keymap.set("n", "K", "<cmd>Lspsaga hover_doc<CR>", { desc = "üìú Hover Documentation" })
vim.keymap.set("n", "gd", "<cmd>Lspsaga goto_definition<CR>", { desc = "üîç Go To Definition" })
vim.keymap.set("n", "<leader>xx", "<cmd>TroubleToggle<CR>", { desc = "üö® –û—Ç–∫—Ä—ã—Ç—å Trouble" })

vim.keymap.set("n", "<C-h>", "<C-w>h", { noremap = true, silent = true }) -- –í–ª–µ–≤–æ
vim.keymap.set("n", "<C-j>", "<C-w>j", { noremap = true, silent = true }) -- –í–Ω–∏–∑
vim.keymap.set("n", "<C-k>", "<C-w>k", { noremap = true, silent = true }) -- –í–≤–µ—Ä—Ö
vim.keymap.set("n", "<C-l>", "<C-w>l", { noremap = true, silent = true }) -- –í–ø—Ä–∞–≤–æ

vim.api.nvim_set_keymap("n", "<leader>gp", ":!glab ci list<CR>", { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<leader>gr", ":!glab ci run<CR>", { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<leader>gs", ":!glab ci status<CR>", { noremap = true, silent = true })

-- üìå Symbols Outline (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–¥–∞)
vim.keymap.set(
	"n",
	"<leader>o",
	":SymbolsOutline<CR>",
	{ noremap = true, silent = true, desc = "üìë –û—Ç–∫—Ä—ã—Ç—å Symbols Outline" }
)

-- üî• –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (Comment.nvim)
vim.keymap.set("n", "<leader>/", "gcc", { noremap = false, desc = "–ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É" })
vim.keymap.set(
	"v",
	"<leader>/",
	"gc",
	{ noremap = false, desc = "–ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ" }
)

-- üöÄ Noice (–∏—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
vim.keymap.set(
	"n",
	"<leader>un",
	":Noice history<CR>",
	{ noremap = true, silent = true, desc = "üìú –ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π" }
)
